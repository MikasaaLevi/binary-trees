Binary tree Iterative traversals:

Preorder:- Pre-order traversal is to visit the root first. Then traverse the left subtree. Finally, traverse the right subtree.

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,2,3]

Explanation:- 

code:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> preorder=new ArrayList<Integer>();
        Stack<TreeNode> nodes=new Stack<TreeNode>();
        if(root==null)
            return preorder;
        nodes.push(root);
        while(!nodes.isEmpty())
        {
            TreeNode temp=nodes.peek();
            nodes.pop();
            preorder.add(temp.val);
            if(temp.right!=null)
            nodes.push(temp.right);
            if(temp.left!=null)
            nodes.push(temp.left);
        }
        return preorder;
    }
}

PostOrder:-Post-order traversal is to traverse the left subtree first. Then traverse the right subtree. Finally, visit the root.

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [3,2,1]

Explanation:-

code:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> postorder=new ArrayList<>();
        Stack<TreeNode> st=new Stack<TreeNode>();
        TreeNode curr=root;
        while(curr!=null || !st.isEmpty())
        {
            if(curr!=null)
            {
                st.push(curr);
                curr=curr.left;
            }
            else
            {
                TreeNode temp=st.peek().right;
                if(temp==null)
                {
                   while(!st.isEmpty()&& temp==st.peek().right)
                   {
                       temp=st.peek();
                       postorder.add(temp.val);
                       st.pop();
                   }
                }
                else
                {
                    curr=temp;
                }
            }
        }
        return postorder;
    }
}

Inorder:- In-order traversal is to traverse the left subtree first. Then visit the root. Finally, traverse the right subtree.

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]

Explanation:-

code:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        Stack<TreeNode> st=new Stack<TreeNode>();
        List<Integer> inorder=new ArrayList<>();
        if(root==null)
            return inorder;
        TreeNode curr=root;
        while(curr!=null || !st.isEmpty())
        {
            if(curr!=null)
            {
                st.push(curr);
                curr=curr.left;
            }
            else if(curr==null && !st.isEmpty())
            {
               TreeNode temp=st.peek();
               st.pop();
               inorder.add(temp.val);
               curr=temp.right;
            }
        }
        return inorder;
    }
}

Level order traversal:- 

Given binary tree [3,9,20,null,null,15,7]

    3
   / \
  9  20
    /  \
   15   7

answer:- [
  [3],
  [9,20],
  [15,7]
]

Explanation:-

code:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> levelNode=new LinkedList<TreeNode>();
        List<List<Integer>> nodes=new ArrayList<>();
        if(root==null)
            return nodes;
        levelNode.add(root);
        while(!levelNode.isEmpty())
        {
            int size=levelNode.size();
            List<Integer> currentLevel=new ArrayList<>();
            for(int i=0;i<size;i++)
            {
               TreeNode temp=levelNode.remove();
                currentLevel.add(temp.val);
                if(temp.left!=null)
                    levelNode.add(temp.left);
                if(temp.right!=null)
                    levelNode.add(temp.right);
            }
           nodes.add(currentLevel); 
        }
        return nodes;
    }
}